#!/usr/bin/env bash
set -e

# Data API Record Creation Test
# Tests creating a new record using the built-in users schema

# Source helpers
source "$(dirname "$0")/../curl-helper.sh"
source "$(dirname "$0")/../helpers/test-tenant-helper.sh"

print_step "Testing Data API record creation"

# Wait for server to be ready
wait_for_server

# Setup isolated test environment
print_step "Creating isolated test tenant"
setup_isolated_test

# Authenticate with admin user (has record creation privileges)
print_step "Setting up authentication for admin user"
JWT_TOKEN=$(get_user_token "$TEST_TENANT_NAME" "admin")

if [[ -n "$JWT_TOKEN" && "$JWT_TOKEN" != "null" ]]; then
    print_success "Admin authentication configured"
    export JWT_TOKEN
else
    test_fail "Failed to authenticate admin user"
fi

# Test 1: First create the account schema (since users is a system schema)
print_step "Creating account schema for testing"

account_schema=$(cat spec/account.json)
schema_response=$(auth_post "api/meta/account" "$account_schema")
assert_success "$schema_response"
print_success "Account schema created for testing"

# Test 2: Create a new account record
print_step "Testing POST /api/data/account"

# Create test account data as an array (Data API expects bulk operations)
# Note: 'id' is omitted as it's auto-generated by the system
account_data='[{
    "name": "Test User",
    "email": "testuser@example.com", 
    "username": "testuser123",
    "account_type": "personal",
    "balance": 100.50,
    "is_active": true,
    "is_verified": false
}]'

# Create the record
response=$(auth_post "api/data/account" "$account_data")

# Verify successful creation
assert_success "$response"
assert_has_field "data" "$response"

# Extract the created record data (array response, get first record)
records_array=$(extract_data "$response")
if [[ "$records_array" == "null" ]]; then
    test_fail "Record data is null in response"
fi

# Get the first record from the array
record_data=$(echo "$records_array" | jq -r '.[0]')
if [[ "$record_data" == "null" ]]; then
    test_fail "First record is null in response array"
fi

# Check that an ID was generated
record_id=$(echo "$record_data" | jq -r '.id')
if [[ -n "$record_id" && "$record_id" != "null" && "$record_id" != "" ]]; then
    print_success "Record created with ID: $record_id"
else
    test_fail "Expected record ID to be generated, got: $record_id"
fi

# Verify the record contains our input data
record_name=$(echo "$record_data" | jq -r '.name')
if [[ "$record_name" == "Test User" ]]; then
    print_success "Record contains correct name: $record_name"
else
    test_fail "Expected name 'Test User', got: $record_name"
fi

record_email=$(echo "$record_data" | jq -r '.email')
if [[ "$record_email" == "testuser@example.com" ]]; then
    print_success "Record contains correct email: $record_email"
else
    test_fail "Expected email 'testuser@example.com', got: $record_email"
fi

record_username=$(echo "$record_data" | jq -r '.username')
if [[ "$record_username" == "testuser123" ]]; then
    print_success "Record contains correct username: $record_username"
else
    test_fail "Expected username 'testuser123', got: $record_username"
fi

record_account_type=$(echo "$record_data" | jq -r '.account_type')
if [[ "$record_account_type" == "personal" ]]; then
    print_success "Record contains correct account_type: $record_account_type"
else
    test_fail "Expected account_type 'personal', got: $record_account_type"
fi

# Test 3: Verify record exists by retrieving it
print_step "Testing GET /api/data/account/$record_id to verify creation"

get_response=$(auth_get "api/data/account/$record_id")
assert_success "$get_response"

# Extract and verify the retrieved record
retrieved_data=$(extract_data "$get_response")
if [[ "$retrieved_data" == "null" ]]; then
    test_fail "Retrieved record data is null"
fi

retrieved_id=$(echo "$retrieved_data" | jq -r '.id')
if [[ "$retrieved_id" == "$record_id" ]]; then
    print_success "Retrieved record has matching ID: $retrieved_id"
else
    test_fail "Expected retrieved ID '$record_id', got: '$retrieved_id'"
fi

retrieved_name=$(echo "$retrieved_data" | jq -r '.name')
if [[ "$retrieved_name" == "Test User" ]]; then
    print_success "Retrieved record has correct name: $retrieved_name"
else
    test_fail "Expected retrieved name 'Test User', got: '$retrieved_name'"
fi

# Test 4: Verify system fields are automatically populated
print_step "Verifying system fields are populated"

# Check for system timestamps
created_at=$(echo "$record_data" | jq -r '.created_at')
if [[ -n "$created_at" && "$created_at" != "null" ]]; then
    print_success "Record has created_at timestamp: $created_at"
else
    test_fail "Expected created_at timestamp to be set"
fi

updated_at=$(echo "$record_data" | jq -r '.updated_at')
if [[ -n "$updated_at" && "$updated_at" != "null" ]]; then
    print_success "Record has updated_at timestamp: $updated_at"
else
    test_fail "Expected updated_at timestamp to be set"
fi

# Note: Tenant isolation is handled at the database level, not in record fields

print_success "Data API record creation tests completed successfully"