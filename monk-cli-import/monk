#!/bin/bash
set -e

# Monk CLI - Standalone command-line interface for PaaS Backend API
# 
# Usage: monk <module> <operation> [args...]
#
# Examples:
#   monk data list account
#   monk meta list schema -e name
#   echo '{"name":"Test"}' | monk data create account
#
# Environment Variables:
#   CLI_BASE_URL - Target API server (default: http://localhost:3000)

# Get the directory of this script (CLI root) - handle symlinks
SCRIPT_PATH="${BASH_SOURCE[0]}"
# Resolve symlinks to get the real path
while [ -L "$SCRIPT_PATH" ]; do
    SCRIPT_DIR=$(cd "$(dirname "$SCRIPT_PATH")" && pwd)
    SCRIPT_PATH=$(readlink "$SCRIPT_PATH")
    # Handle relative symlinks (portable check)
    case "$SCRIPT_PATH" in
        /*) ;; # Absolute path, do nothing
        *) SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH" ;;
    esac
done
CLI_ROOT="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"

# Change to CLI directory 
cd "$CLI_ROOT"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_error() { echo -e "${RED}✗ $1${NC}" >&2; }
print_info() { echo -e "${YELLOW}ℹ $1${NC}"; }

# Show comprehensive help
show_help() {
    cat << EOF
Usage: monk <module> <operation> [args...]

Monk CLI - Command-line interface for PaaS Backend API

MODULES:

  auth                    Authentication and token management
    login --domain <name>   Authenticate with database domain
    logout                  Clear stored JWT token
    status                  Show authentication status
    token                   Display current JWT token

  data                    Data operations on dynamic schemas
    list <schema>           List all records for schema
    get <schema> <id>       Get specific record
    create <schema>         Create record from stdin
    update <schema> <id>    Update record from stdin
    delete <schema> <id>    Delete record
    export <schema> <dir>   Export records to JSON files
    import <schema> <dir>   Import JSON files as records

  meta                    Schema and metadata management
    list schema             List all schemas
    get schema <name>       Get specific schema
    create schema           Create schema from stdin (YAML/JSON)
    update schema <name>    Update schema from stdin
    delete schema <name>    Delete schema

  find                    Advanced search with filter DSL
    <schema> [filters]      Search records with JSON filter criteria

  ping                    Server connectivity testing
    [options]               Test API server connectivity
    -v                      Verbose server information
    -j <token>              Include JWT token in request

  test                    Comprehensive test management
    all [pattern]           Run tests (all or pattern matching)
    git <branch> [commit]   Create/update git-aware test environment
    diff <run1> <run2>      Compare test results between environments
    env [var_name]          Show test environment variables

  pool                    Database pool management
    status                  Show database pool status (X/10)
    list                    List all active test databases
    cleanup [hours]         Clean up old databases (default: 24h+)
    cleanup-all             Clean up all databases

  servers                 Remote server management
    add <name> <endpoint>   Register remote server
    list                    List all servers with health status
    current                 Show currently selected server
    use <name>              Switch to server (sets CLI_BASE_URL)
    delete <name>           Remove server from registry
    ping <name>             Health check specific server

  user                    User management and access control
    list                    List all users
    get <id>                Get specific user
    create                  Create user from stdin
    update <id>             Update user from stdin
    delete <id>             Delete user
    permissions <id>        Manage user permissions

  root                    System administration
    status                  Show system status and health
    config                  System configuration management
    domains                 Domain and database management
    cleanup                 System cleanup and maintenance
    backup                  Backup and restore operations

EXAMPLES:

  # Basic workflow
  monk auth login --domain my_test_db # Authenticate
  monk meta list schema               # List schemas
  monk data list account              # List account records

  # Test management workflow
  monk test git main                  # Test current main branch
  monk test git feature/API-281       # Test feature branch
  monk test diff main-abc123 feature-def456 # Compare test environments
  monk test all 00-20                 # Run specific test ranges

  # Database pool workflow
  monk pool status                    # Check pool usage (X/10)
  monk pool list                      # List all test databases
  monk pool cleanup                   # Clean up old databases
  monk pool cleanup 48                # Clean up databases older than 48h

  # Remote server workflow
  monk servers add prod api.company.com:443    # Register production server
  monk servers add staging staging-api.company.com:3000  # Register staging
  monk servers list                            # List all with health status
  monk servers use prod                        # Switch to production
  monk auth login --domain my_prod_db         # Authenticate with production
  monk data list account                      # List accounts on production
  monk servers ping-all                       # Health check all servers

  # Development workflow
  echo '{"name":"test"}' | monk data create user
  monk find user '{"where":{"name":"test"}}'

GLOBAL OPTIONS:
  -h, --help              Show this help message
  
ENVIRONMENT VARIABLES:
  CLI_BASE_URL           Target API server (auto-detected from monk test env)
  CLI_VERBOSE            Enable verbose output for all commands
  JWT_TOKEN              Authentication token (managed by monk auth)

For detailed help on any module, use: monk <module> --help

Documentation: See docs/AUTHENTICATION.md for authentication flow details
EOF
}

# Check for help flags
case "${1:-}" in
    -h|--help|help)
        show_help
        exit 0
        ;;
esac

# Check if module is provided
if [ $# -eq 0 ]; then
    echo "Usage: monk <module> <operation> [args...]" >&2
    echo "Modules: auth, data, meta, find, ping, test, pool, servers, user, root" >&2
    echo "Use 'monk --help' for detailed information" >&2
    exit 1
fi

# Get the module and pass remaining args to the specific CLI script
MODULE="$1"
shift

case "$MODULE" in
    auth)
        exec "./cli/auth.sh" "$@"
        ;;
    data)
        exec "./cli/data.sh" "$@"
        ;;
    meta)
        exec "./cli/meta.sh" "$@"
        ;;
    find)
        exec "./cli/find.sh" "$@"
        ;;
    ping)
        exec "./cli/ping.sh" "$@"
        ;;
    test)
        exec "./cli/test.sh" "$@"
        ;;
    pool)
        exec "./cli/test-pool.sh" "$@"
        ;;
    servers)
        exec "./cli/servers.sh" "$@"
        ;;
    user)
        exec "./cli/user.sh" "$@"
        ;;
    root)
        exec "./cli/root.sh" "$@"
        ;;
    *)
        echo "Invalid module: $MODULE" >&2
        echo "Available modules: auth, data, meta, find, ping, test, pool, servers, user, root" >&2
        exit 1
        ;;
esac